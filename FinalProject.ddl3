DROP SEQUENCE Department_seq ; 
create sequence Department_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Department_PK_trig 
before insert on Department
for each row 
begin 
select Department_seq.nextval into :new.dept_id from dual; 
end; 
/
alter table Department add created date ; 
alter table Department add created_by VARCHAR2 (255) ; 
alter table Department add row_version_number integer ; 
alter table Department add updated date ; 
alter table Department add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Department_AUD_trig 
before insert or update on Department 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE History_seq ; 
create sequence History_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger History_PK_trig 
before insert on History
for each row 
begin 
select History_seq.nextval into :new.history_id from dual; 
end; 
/
alter table History add created date ; 
alter table History add created_by VARCHAR2 (255) ; 
alter table History add row_version_number integer ; 
alter table History add updated date ; 
alter table History add updated_by VARCHAR2 (255) ; 
/
create or replace trigger History_AUD_trig 
before insert or update on History 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE Parent_children_seq ; 
create sequence Parent_children_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Parent_children_PK_trig 
before insert on Parent_children
for each row 
begin 
select Parent_children_seq.nextval into :new.parent_cn_id from dual; 
end; 
/
alter table Parent_children add created date ; 
alter table Parent_children add created_by VARCHAR2 (255) ; 
alter table Parent_children add row_version_number integer ; 
alter table Parent_children add updated date ; 
alter table Parent_children add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Parent_children_AUD_trig 
before insert or update on Parent_children 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE Person_seq ; 
create sequence Person_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Person_PK_trig 
before insert on Person
for each row 
begin 
select Person_seq.nextval into :new.person_id from dual; 
end; 
/
alter table Person add created date ; 
alter table Person add created_by VARCHAR2 (255) ; 
alter table Person add row_version_number integer ; 
alter table Person add updated date ; 
alter table Person add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Person_AUD_trig 
before insert or update on Person 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE Project_seq ; 
create sequence Project_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Project_PK_trig 
before insert on Project
for each row 
begin 
select Project_seq.nextval into :new.project_id from dual; 
end; 
/
alter table Project add created date ; 
alter table Project add created_by VARCHAR2 (255) ; 
alter table Project add row_version_number integer ; 
alter table Project add updated date ; 
alter table Project add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Project_AUD_trig 
before insert or update on Project 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE Status_seq ; 
create sequence Status_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Status_PK_trig 
before insert on Status
for each row 
begin 
select Status_seq.nextval into :new.Status_ID from dual; 
end; 
/
alter table Status add created date ; 
alter table Status add created_by VARCHAR2 (255) ; 
alter table Status add row_version_number integer ; 
alter table Status add updated date ; 
alter table Status add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Status_AUD_trig 
before insert or update on Status 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE pjct_per_seq ; 
create sequence pjct_per_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger pjct_per_PK_trig 
before insert on pjct_per
for each row 
begin 
select pjct_per_seq.nextval into :new.pp_id from dual; 
end; 
/
alter table pjct_per add created date ; 
alter table pjct_per add created_by VARCHAR2 (255) ; 
alter table pjct_per add row_version_number integer ; 
alter table pjct_per add updated date ; 
alter table pjct_per add updated_by VARCHAR2 (255) ; 
/
create or replace trigger pjct_per_AUD_trig 
before insert or update on pjct_per 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX Person_person_id_FK_0 ;
CREATE INDEX Person_person_id_FK_0 ON History(Person_person_id) ;
DROP INDEX Project_project_id_FK_1 ;
CREATE INDEX Project_project_id_FK_1 ON History(Project_project_id) ;
DROP INDEX Status_Status_ID_FK_2 ;
CREATE INDEX Status_Status_ID_FK_2 ON History(Status_Status_ID) ;
DROP INDEX Person_person_id_FK_3 ;
CREATE INDEX Person_person_id_FK_3 ON Parent_children(Person_person_id) ;
DROP INDEX Person_person_id1_FK_4 ;
CREATE INDEX Person_person_id1_FK_4 ON Parent_children(Person_person_id1) ;
DROP INDEX Department_dept_id_FK_5 ;
CREATE INDEX Department_dept_id_FK_5 ON Person(Department_dept_id) ;
DROP INDEX Person_person_id_FK_6 ;
CREATE INDEX Person_person_id_FK_6 ON Person(Person_person_id) ;
DROP INDEX Project_project_id_FK_7 ;
CREATE INDEX Project_project_id_FK_7 ON Person(Project_project_id) ;
DROP INDEX Department_dept_id_FK_8 ;
CREATE INDEX Department_dept_id_FK_8 ON Project(Department_dept_id) ;
DROP INDEX Project_project_id_FK_9 ;
CREATE INDEX Project_project_id_FK_9 ON Project(Project_project_id) ;
DROP INDEX Status_Status_ID_FK_10 ;
CREATE INDEX Status_Status_ID_FK_10 ON Project(Status_Status_ID) ;
DROP INDEX Person_person_id_FK_11 ;
CREATE INDEX Person_person_id_FK_11 ON pjct_per(Person_person_id) ;
DROP INDEX Project_project_id_FK_12 ;
CREATE INDEX Project_project_id_FK_12 ON pjct_per(Project_project_id) ;
